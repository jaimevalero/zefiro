# tasks.yaml
requirements_analyzer_assessment:
 description: >
   Performs the requirements analysis for the multi-agent system. You will:
   1. Analyze the use case description provided below.
   2. Identify the specific domain and purpose of the system
   3. Extract key functional requirements
   4. Determine necessary competencies to solve the problem
   5. Propose initial general structure for the crew
   Follow all instructions provided in {case}.
   Remember that the AI will only have human input at the beginning (no human feedback during the execution of the AI you generate or iteratively)
   Also remember that the generated AIs will not have access to Internet, or other resources (APIs...) All information will have to be provided by the user from the webapp manually.
 agent: requirements_analyzer
 expected_output: "Detailed technical requirements document"
 context: []  # Initial step

domain_expert_assessment:
 description: >
   Provides specialized knowledge of the identified domain. You will:
   1. Analyze the specific domain of the use case
   2. Identify key terminology and concepts of the sector
   3. Determine relevant best practices, methodologies, and standards.
   4. Suggest knowledge sources and technical references
   5. Evaluate critical domain particularities
   Follow all instructions provided in {case}.
   Remember that the AI will only have human input at the beginning (no human feedback during the execution of the AI you generate or iteratively)
   Also remember that the generated AIs will not have access to Internet, or other resources (APIs...) All information will have to be provided by the user from the webapp manually.
 agent: domain_expert
 expected_output: "Specialized domain report with key recommendations"
 context:
   - requirements_analysis_assessment

agents_designer_assessment:
 description: >
   Design the architecture to generate a crew.ai agents AI.
   You must define each of the agents needed for the crew.
   To do this, you will:
   1. Create detailed profiles for each agent.
   2. Develop backstories consistent with the context
   3. Assign complementary and specialized roles
   4. Define individual objectives aligned with the global purpose
   5. Establish interaction protocols between agents
   Follow all instructions provided in {case}.
   Remember that the AI will only have human input at the beginning (no human feedback during the execution of the AI you generate or iteratively)
   Also remember that the generated AIs will not have access to Internet, or other resources (APIs...) All information will have to be provided by the user from the webapp manually.
   Respond only with the YAML file containing the design of each of the agents. Do not include additional explanations or comments. Don't put content backticks "```yaml"
   You can base it on the following example:
   <example_of_an_agent_design>
   geriatrician:
     role: Geriatrician
     goal: >
       Evaluate the comprehensive health of elderly people
       Diagnose and treat geriatric diseases
       Assess functionality and specific needs of the elderly
       Propose personalized care plan
     backstory: Geriatrician with 16 years of experience in elderly patient care and geriatric medicine. Eminence in his field and speaker at talks on how to communicate with elderly people. Has worked in hospitals and geriatric clinics, developing a patient-centered approach.
     context: Geriatric evaluation of the case (case)
   </example_of_an_agent_design>
   In the output yaml you generate, to indicate the original case you are basing it on, although in the example it will put (case), it has to be generated by changing the parenthesis characters to braces.
 output_file: agents_created.yaml
 agent: agents_designer
 expected_output: "Design of agent architecture with cognitive profiles"
 context:
   - requirements_analysis_assessment
   - domain_expertise_assessment

tasks_designer_assessment:
 description: >
   Design the architecture to generate a crew.ai agents AI, specifically the part of generating the tasks.yaml file.
   You will base it on the agents_created.yaml generated in the agents_design_assessment phase.
   Generate the tasks.yaml file. You will:
   1. Generate a task for each agent, where the task name will be <agent_name>_assessment.
   2. Each task will generate a report. Think about what sections each report will have, following the best practices in the agent's domain area.
   3. Think carefully about what the context of each task will be.
   The context must be an array in yaml that can be empty which indicates the order in which the tasks will be executed, depending on the logical order in which the agents will pass information to each other.
   There will be an initial task that will not have context, and the rest of the tasks will have the previous task as context (Although they can be empty).
   Remember that the order of the tasks within the YAML is important. Don't put a task whose context is a future task, that is, one that comes later in the yaml (the tasks will be executed in sequential order according to the yaml)
   4. Apply best practices in YAML structure
   5. Validate consistency between components
   6. Generate clear documentation for each element
   7. Optimize syntax for maintainability
   Follow all instructions provided in {case}.
   Remember that the AI will only have human input at the beginning (no human feedback during the execution of the AI you generate or iteratively)
   Also remember that the generated AIs will not have access to Internet, or other resources (APIs...) All information will have to be provided by the user from the webapp manually.
   Respond only with the YAML file containing the design of each of the tasks. Do not include additional explanations or comments. Don't put content backticks "```yaml"
   You can base it on the following example:
   <example_of_a_task_design>
   geriatrician_assessment:
     description: >
       Perform a geriatric evaluation of the patient. You will
       1. Analyze symptoms considering the changes of aging
       2. Evaluate functionality and frailty
       3. Consider polypharmacy and comorbidities
       4. Recommend appropriate treatments for elderly people
       Your assessment should be adapted to the particularities of geriatric age.
       Follow all instructions provided in (case).
     agent: geriatrician
     expected_output: "Geriatric evaluation of the case"
     context:
       - general_practitioner_assessment
   </example_of_a_task_design>
   In the output yaml you generate, to indicate the original case you are basing it on, although in the example it will put (case), it has to be generated by changing the parenthesis characters to braces.
 agent: tasks_designer
 output_file: tasks_created.yaml
 expected_output: "Syntactically correct and documented YAML files"
 context:
   - requirements_analysis_assessment
   - domain_expertise_assessment
   - agents_designer_assessment

interface_designer_assessment:
 description: >
   Design the user interface of the system, for a webapp that will contact a crew of crew.ai
   That is, the windows that will be offered to the user on the crew's website to solve the problem you have been told about.
   You must generate it in yaml format, and following the format of the examples I have given you.
   You will:
   1. Create a short description (description:) of the application, and the name (name:) a slim alphanumeric codename in lowercase and middle or underscore hyphens).
   2. You will generate in prompt (prompt:) a description of the task that the AI will perform.
   3. In nomination, leave everything as "all" and do not modify it.
   4: In (main_info:), a description of the application which is what the user will read as soon as they arrive at the website, and a description of the agents involved.
   5. In (download_example_report_link:), let it point to google, for now.
   6. The colors should be those that you believe best accompany the type of problem that the AI solves, (for example, if the AI solves problems of elderly people, ochre tones.). Here you act as a web designer
   7: In (form:), generate an example form, with as many fields as you see necessary. The i
   8: Make sure the yaml is well formed and has no syntax errors.
   9: Respond only with the YAML file containing the interface design. Do not include additional explanations or comments. Don't put content backticks "```yaml"
   Remember that the AI will only have human input at the beginning (no human feedback during the execution of the AI you generate or iteratively). All the info needed for the case should be requested within the fields: fields
   Also remember that the generated AIs will not have access to Internet, or other resources (APIs...) All information will have to be provided by the user from the webapp manually.

   You can base it on the following example:
   <example_of_interface_design>
   meta:
     name: "footnotes"
     description: "your medical cabinet"

   backend:
     case:
       prompt: >
         You are a sports preparation team, and you have to help the runner prepare for their next competition, as part of their sports career.
         <case>(case)</case>

     nomination:
       method:
         type: "all" # all to chose all agents or prompt


   frontend:
     app_name: "Foot Notes"
     main_info: >
       This application generates assistance for runners who want to prepare for a competition. The experts include:
       - Sports Doctor
       - Sports Nutritionist
       - Sports Physiotherapist
       - Sports Psychologist
       - Strength Coach.

     download_example_report_link: "https://github.com/jaimevalero/zefiro/raw/main/meta-crew-frontend/static/examples/footnotes.md"
     # New theme configuration
     theme:
       dark: false
       colors:
         primary: "#E91E63"    # Fuchsia, dynamism and energy
         secondary: "#1E88E5"  # Energetic blue, dynamism and motivation
         accent: "#6A1B9A"     # Dark purple, complements the other colors and allows white text
         info: "#2196F3"
         warning: "#FFC107"    # Yellow, attention and caution
         error: "#F44336"
         alert: "#FFECB3"
         success: "#4CAF50"    # Green, achievements and success
     # Flexible form definition
     form:
       # General form for sports preparation
       title: "Runner Information"
       description: "Please complete the runner information"
